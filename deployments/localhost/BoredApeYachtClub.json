{
  "address": "0x1aAD0be6EaB3EDbDd05c05601037CC4FCd9bB944",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maxNftSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "saleStart",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BAYC_PROVENANCE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_APES",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REVEAL_TIMESTAMP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "apePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencySetStartingIndexBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flipSaleState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxApePurchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numberOfTokens",
          "type": "uint256"
        }
      ],
      "name": "mintApe",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveApes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleIsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "provenanceHash",
          "type": "string"
        }
      ],
      "name": "setProvenanceHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "revealTimeStamp",
          "type": "uint256"
        }
      ],
      "name": "setRevealTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setStartingIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startingIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startingIndexBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x857d283002e717283d327198c471384346aa07ff3a7c1113f97d60a29f0a5d42",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "4401505",
    "logsBloom": "0x
    "blockHash": "0x9077266c3e520a5636c4ecec26ab5f9b057d8a0720f0fedf13f234296d4c32a7",
    "transactionHash": "0x857d283002e717283d327198c471384346aa07ff3a7c1113f97d60a29f0a5d42",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 15394406,
        "transactionHash": "0x857d283002e717283d327198c471384346aa07ff3a7c1113f97d60a29f0a5d42",
        "address": "0x1aAD0be6EaB3EDbDd05c05601037CC4FCd9bB944",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9077266c3e520a5636c4ecec26ab5f9b057d8a0720f0fedf13f234296d4c32a7"
      }
    ],
    "blockNumber": 15394406,
    "cumulativeGasUsed": "4401505",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Bored Ape Yacht Club",
    "BAYC",
    10000,
    1
  ],
  "numDeployments": 1,
  "solcInputHash": "4b0667ce08782cca0afb602138f22eeb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxNftSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleStart\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BAYC_PROVENANCE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_APES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVEAL_TIMESTAMP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencySetStartingIndexBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipSaleState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxApePurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"mintApe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveApes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"provenanceHash\",\"type\":\"string\"}],\"name\":\"setProvenanceHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"revealTimeStamp\",\"type\":\"uint256\"}],\"name\":\"setRevealTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setStartingIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingIndexBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extends ERC721 Non-Fungible Token Standard basic implementation\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"baseURI()\":{\"details\":\"Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"BoredApeYachtClub contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"emergencySetStartingIndexBlock()\":{\"notice\":\"Set the starting index block for the collection, essentially unblocking setting starting index\"},\"mintApe(uint256)\":{\"notice\":\"Mints Bored Apes\"},\"reserveApes()\":{\"notice\":\"Set some Bored Apes aside\"},\"setRevealTimestamp(uint256)\":{\"notice\":\"DM Gargamel in Discord that you're standing right behind him.\"},\"setStartingIndex()\":{\"notice\":\"Set the starting index for the collection\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BoredApeYachtClub.sol\":\"BoredApeYachtClub\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BoredApeYachtClub.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2021-04-22\\n*/\\n\\n// File: @openzeppelin/contracts/utils/Context.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/introspection/IERC165.sol\\n\\n\\n\\npragma solidity ^0.8.0;\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\\n\\n\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\\n\\n\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\\n\\n\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\n\\n\\n\\npragma solidity ^0.8.0;\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\\n// File: @openzeppelin/contracts/introspection/ERC165.sol\\n\\n\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/math/SafeMath.sol\\n\\n\\n\\npragma solidity ^0.8.0;\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/Address.sol\\n\\n\\n\\npragma solidity ^0.8.0;\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/EnumerableSet.sol\\n\\n\\n\\npragma solidity ^0.8.0;\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/EnumerableMap.sol\\n\\n\\n\\npragma solidity ^0.8.0;\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/Strings.sol\\n\\n\\n\\npragma solidity ^0.8.0;\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\\n\\n\\n\\npragma solidity ^0.8.0;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using Strings for uint256;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /*\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n     *\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(base, tokenId.toString()));\\n    }\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\n    * to the token ID if no specific URI is set for that token ID.\\n    */\\n    function baseURI() public view virtual returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId); // internal owner\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        _holderTokens[owner].remove(tokenId);\\n\\n        _tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\"); // internal owner\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\n            IERC721Receiver(to).onERC721Received.selector,\\n            _msgSender(),\\n            from,\\n            tokenId,\\n            _data\\n        ), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\\n// File: @openzeppelin/contracts/access/Ownable.sol\\n\\n\\n\\npragma solidity ^0.8.0;\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n// File: contracts/BoredApeYachtClub.sol\\n\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title BoredApeYachtClub contract\\n * @dev Extends ERC721 Non-Fungible Token Standard basic implementation\\n */\\ncontract BoredApeYachtClub is ERC721, Ownable {\\n    using SafeMath for uint256;\\n\\n    string public BAYC_PROVENANCE = \\\"\\\";\\n\\n    uint256 public startingIndexBlock;\\n\\n    uint256 public startingIndex;\\n\\n    uint256 public constant apePrice = 80000000000000000; //0.08 ETH\\n\\n    uint public constant maxApePurchase = 20;\\n\\n    uint256 public MAX_APES;\\n\\n    bool public saleIsActive = true;\\n\\n    uint256 public REVEAL_TIMESTAMP;\\n\\n    constructor(string memory name, string memory symbol, uint256 maxNftSupply, uint256 saleStart) ERC721(name, symbol) {\\n        MAX_APES = maxNftSupply;\\n        REVEAL_TIMESTAMP = saleStart + (86400 * 9);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        uint balance = address(this).balance;\\n        payable(msg.sender).transfer(balance);\\n    }\\n\\n    /**\\n     * Set some Bored Apes aside\\n     */\\n    function reserveApes() public onlyOwner {\\n        uint supply = totalSupply();\\n        uint i;\\n        for (i = 0; i < 30; i++) {\\n            _safeMint(msg.sender, supply + i);\\n        }\\n    }\\n\\n    /**\\n     * DM Gargamel in Discord that you're standing right behind him.\\n     */\\n    function setRevealTimestamp(uint256 revealTimeStamp) public onlyOwner {\\n        REVEAL_TIMESTAMP = revealTimeStamp;\\n    }\\n\\n    /*\\n    * Set provenance once it's calculated\\n    */\\n    function setProvenanceHash(string memory provenanceHash) public onlyOwner {\\n        BAYC_PROVENANCE = provenanceHash;\\n    }\\n\\n    function setBaseURI(string memory baseURI) public onlyOwner {\\n        _setBaseURI(baseURI);\\n    }\\n\\n    /*\\n    * Pause sale if active, make active if paused\\n    */\\n    function flipSaleState() public onlyOwner {\\n        saleIsActive = !saleIsActive;\\n    }\\n\\n    /**\\n    * Mints Bored Apes\\n    */\\n    function mintApe(uint numberOfTokens) public payable {\\n        require(saleIsActive, \\\"Sale must be active to mint Ape\\\");\\n        require(numberOfTokens <= maxApePurchase, \\\"Can only mint 20 tokens at a time\\\");\\n        require(totalSupply().add(numberOfTokens) <= MAX_APES, \\\"Purchase would exceed max supply of Apes\\\");\\n        require(apePrice.mul(numberOfTokens) <= msg.value, \\\"Ether value sent is not correct\\\");\\n\\n        for(uint i = 0; i < numberOfTokens; i++) {\\n            uint mintIndex = totalSupply();\\n            if (totalSupply() < MAX_APES) {\\n                _safeMint(msg.sender, mintIndex);\\n            }\\n        }\\n\\n        // If we haven't set the starting index and this is either 1) the last saleable token or 2) the first token to be sold after\\n        // the end of pre-sale, set the starting index block\\n        if (startingIndexBlock == 0 && (totalSupply() == MAX_APES || block.timestamp >= REVEAL_TIMESTAMP)) {\\n            startingIndexBlock = block.number;\\n        }\\n    }\\n\\n    /**\\n     * Set the starting index for the collection\\n     */\\n    function setStartingIndex() public {\\n        require(startingIndex == 0, \\\"Starting index is already set\\\");\\n        require(startingIndexBlock != 0, \\\"Starting index block must be set\\\");\\n\\n        startingIndex = uint(blockhash(startingIndexBlock)) % MAX_APES;\\n        // Just a sanity case in the worst case if this function is called late (EVM only stores last 256 block hashes)\\n        if (block.number.sub(startingIndexBlock) > 255) {\\n            startingIndex = uint(blockhash(block.number - 1)) % MAX_APES;\\n        }\\n        // Prevent default sequence\\n        if (startingIndex == 0) {\\n            startingIndex = startingIndex.add(1);\\n        }\\n    }\\n\\n    /**\\n     * Set the starting index block for the collection, essentially unblocking\\n     * setting starting index\\n     */\\n    function emergencySetStartingIndexBlock() public onlyOwner {\\n        require(startingIndex == 0, \\\"Starting index is already set\\\");\\n\\n        startingIndexBlock = block.number;\\n    }\\n}\\n\",\"keccak256\":\"0xe1cf6cf1892f2dddbcae2cfb522aef469fa0aeb8881101a078012ab19488924a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260405180602001604052806000815250600b90805190602001906200002b929190620002c9565b506001600f60006101000a81548160ff0219169083151502179055503480156200005457600080fd5b506040516200519e3803806200519e83398181016040528101906200007a919062000402565b8383620000946301ffc9a760e01b620001e960201b60201c565b8160069080519060200190620000ac929190620002c9565b508060079080519060200190620000c5929190620002c9565b50620000de6380ac58cd60e01b620001e960201b60201c565b620000f6635b5e139f60e01b620001e960201b60201c565b6200010e63780e9d6360e01b620001e960201b60201c565b5050600062000122620002c160201b60201c565b905080600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35081600e81905550620bdd8081620001d9919062000559565b6010819055505050505062000743565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141562000255576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200024c90620004c7565b60405180910390fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600033905090565b828054620002d790620005f6565b90600052602060002090601f016020900481019282620002fb576000855562000347565b82601f106200031657805160ff191683800117855562000347565b8280016001018555821562000347579182015b828111156200034657825182559160200191906001019062000329565b5b5090506200035691906200035a565b5090565b5b80821115620003755760008160009055506001016200035b565b5090565b6000620003906200038a8462000512565b620004e9565b905082815260208101848484011115620003a957600080fd5b620003b6848285620005c0565b509392505050565b600082601f830112620003d057600080fd5b8151620003e284826020860162000379565b91505092915050565b600081519050620003fc8162000729565b92915050565b600080600080608085870312156200041957600080fd5b600085015167ffffffffffffffff8111156200043457600080fd5b6200044287828801620003be565b945050602085015167ffffffffffffffff8111156200046057600080fd5b6200046e87828801620003be565b93505060406200048187828801620003eb565b92505060606200049487828801620003eb565b91505092959194509250565b6000620004af601c8362000548565b9150620004bc8262000700565b602082019050919050565b60006020820190508181036000830152620004e281620004a0565b9050919050565b6000620004f562000508565b90506200050382826200062c565b919050565b6000604051905090565b600067ffffffffffffffff82111562000530576200052f620006c0565b5b6200053b82620006ef565b9050602081019050919050565b600082825260208201905092915050565b60006200056682620005b6565b91506200057383620005b6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620005ab57620005aa62000662565b5b828201905092915050565b6000819050919050565b60005b83811015620005e0578082015181840152602081019050620005c3565b83811115620005f0576000848401525b50505050565b600060028204905060018216806200060f57607f821691505b6020821081141562000626576200062562000691565b5b50919050565b6200063782620006ef565b810181811067ffffffffffffffff82111715620006595762000658620006c0565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433136353a20696e76616c696420696e7465726661636520696400000000600082015250565b6200073481620005b6565b81146200074057600080fd5b50565b614a4b80620007536000396000f3fe60806040526004361061021a5760003560e01c80636c0360eb11610123578063b0f67427116100ab578063e36d64981161006f578063e36d64981461077a578063e985e9c5146107a5578063e9866550146107e2578063eb8d2444146107f9578063f2fde38b146108245761021a565b8063b0f67427146106a7578063b88d4fde146106be578063bb8a16bd146106e7578063c87b56dd14610712578063cb774d471461074f5761021a565b80637d17fcbe116100f25780637d17fcbe146105f55780638da5cb5b1461060c57806395d89b4114610637578063a22cb46514610662578063a723533e1461068b5761021a565b80636c0360eb1461054b57806370a0823114610576578063715018a6146105b35780637a3f451e146105ca5761021a565b80632f745c59116101a65780634f6ccce7116101755780634f6ccce71461045257806355f804b31461048f578063571dff3b146104b8578063607e20e3146104e35780636352211e1461050e5761021a565b80632f745c59146103be57806334918dfd146103fb5780633ccfd60b1461041257806342842e0e146104295761021a565b8063095ea7b3116101ed578063095ea7b3146102ed578063109695231461031657806318160ddd1461033f57806318e20a381461036a57806323b872dd146103955761021a565b8063018a2c371461021f57806301ffc9a71461024857806306fdde0314610285578063081812fc146102b0575b600080fd5b34801561022b57600080fd5b506102466004803603810190610241919061344f565b61084d565b005b34801561025457600080fd5b5061026f600480360381019061026a91906133bc565b6108d3565b60405161027c91906139fe565b60405180910390f35b34801561029157600080fd5b5061029a61093a565b6040516102a79190613a19565b60405180910390f35b3480156102bc57600080fd5b506102d760048036038101906102d2919061344f565b6109cc565b6040516102e49190613997565b60405180910390f35b3480156102f957600080fd5b50610314600480360381019061030f9190613380565b610a51565b005b34801561032257600080fd5b5061033d6004803603810190610338919061340e565b610b69565b005b34801561034b57600080fd5b50610354610bff565b6040516103619190613dbb565b60405180910390f35b34801561037657600080fd5b5061037f610c10565b60405161038c9190613dbb565b60405180910390f35b3480156103a157600080fd5b506103bc60048036038101906103b7919061327a565b610c16565b005b3480156103ca57600080fd5b506103e560048036038101906103e09190613380565b610c76565b6040516103f29190613dbb565b60405180910390f35b34801561040757600080fd5b50610410610cd1565b005b34801561041e57600080fd5b50610427610d79565b005b34801561043557600080fd5b50610450600480360381019061044b919061327a565b610e44565b005b34801561045e57600080fd5b506104796004803603810190610474919061344f565b610e64565b6040516104869190613dbb565b60405180910390f35b34801561049b57600080fd5b506104b660048036038101906104b1919061340e565b610e87565b005b3480156104c457600080fd5b506104cd610f0f565b6040516104da9190613dbb565b60405180910390f35b3480156104ef57600080fd5b506104f8610f14565b6040516105059190613a19565b60405180910390f35b34801561051a57600080fd5b506105356004803603810190610530919061344f565b610fa2565b6040516105429190613997565b60405180910390f35b34801561055757600080fd5b50610560610fd9565b60405161056d9190613a19565b60405180910390f35b34801561058257600080fd5b5061059d60048036038101906105989190613215565b61106b565b6040516105aa9190613dbb565b60405180910390f35b3480156105bf57600080fd5b506105c861112a565b005b3480156105d657600080fd5b506105df611267565b6040516105ec9190613dbb565b60405180910390f35b34801561060157600080fd5b5061060a611273565b005b34801561061857600080fd5b5061062161133d565b60405161062e9190613997565b60405180910390f35b34801561064357600080fd5b5061064c611367565b6040516106599190613a19565b60405180910390f35b34801561066e57600080fd5b5061068960048036038101906106849190613344565b6113f9565b005b6106a560048036038101906106a0919061344f565b61157a565b005b3480156106b357600080fd5b506106bc611747565b005b3480156106ca57600080fd5b506106e560048036038101906106e091906132c9565b611807565b005b3480156106f357600080fd5b506106fc611869565b6040516107099190613dbb565b60405180910390f35b34801561071e57600080fd5b506107396004803603810190610734919061344f565b61186f565b6040516107469190613a19565b60405180910390f35b34801561075b57600080fd5b506107646119e2565b6040516107719190613dbb565b60405180910390f35b34801561078657600080fd5b5061078f6119e8565b60405161079c9190613dbb565b60405180910390f35b3480156107b157600080fd5b506107cc60048036038101906107c7919061323e565b6119ee565b6040516107d991906139fe565b60405180910390f35b3480156107ee57600080fd5b506107f7611a82565b005b34801561080557600080fd5b5061080e611b93565b60405161081b91906139fe565b60405180910390f35b34801561083057600080fd5b5061084b60048036038101906108469190613215565b611ba6565b005b610855611d52565b73ffffffffffffffffffffffffffffffffffffffff1661087361133d565b73ffffffffffffffffffffffffffffffffffffffff16146108c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c090613cdb565b60405180910390fd5b8060108190555050565b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606060068054610949906140b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610975906140b2565b80156109c25780601f10610997576101008083540402835291602001916109c2565b820191906000526020600020905b8154815290600101906020018083116109a557829003601f168201915b5050505050905090565b60006109d782611d5a565b610a16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0d90613cbb565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610a5c82610fa2565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610acd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac490613d3b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610aec611d52565b73ffffffffffffffffffffffffffffffffffffffff161480610b1b5750610b1a81610b15611d52565b6119ee565b5b610b5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5190613bdb565b60405180910390fd5b610b648383611d77565b505050565b610b71611d52565b73ffffffffffffffffffffffffffffffffffffffff16610b8f61133d565b73ffffffffffffffffffffffffffffffffffffffff1614610be5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bdc90613cdb565b60405180910390fd5b80600b9080519060200190610bfb929190613039565b5050565b6000610c0b6002611e30565b905090565b60105481565b610c27610c21611d52565b82611e45565b610c66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5d90613d7b565b60405180910390fd5b610c71838383611f23565b505050565b6000610cc982600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061213a90919063ffffffff16565b905092915050565b610cd9611d52565b73ffffffffffffffffffffffffffffffffffffffff16610cf761133d565b73ffffffffffffffffffffffffffffffffffffffff1614610d4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4490613cdb565b60405180910390fd5b600f60009054906101000a900460ff1615600f60006101000a81548160ff021916908315150217905550565b610d81611d52565b73ffffffffffffffffffffffffffffffffffffffff16610d9f61133d565b73ffffffffffffffffffffffffffffffffffffffff1614610df5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dec90613cdb565b60405180910390fd5b60004790503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610e40573d6000803e3d6000fd5b5050565b610e5f83838360405180602001604052806000815250611807565b505050565b600080610e7b83600261215490919063ffffffff16565b50905080915050919050565b610e8f611d52565b73ffffffffffffffffffffffffffffffffffffffff16610ead61133d565b73ffffffffffffffffffffffffffffffffffffffff1614610f03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efa90613cdb565b60405180910390fd5b610f0c81612180565b50565b601481565b600b8054610f21906140b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4d906140b2565b8015610f9a5780601f10610f6f57610100808354040283529160200191610f9a565b820191906000526020600020905b815481529060010190602001808311610f7d57829003601f168201915b505050505081565b6000610fd2826040518060600160405280602981526020016149ed60299139600261219a9092919063ffffffff16565b9050919050565b606060098054610fe8906140b2565b80601f0160208091040260200160405190810160405280929190818152602001828054611014906140b2565b80156110615780601f1061103657610100808354040283529160200191611061565b820191906000526020600020905b81548152906001019060200180831161104457829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156110dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d390613bfb565b60405180910390fd5b611123600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206121b9565b9050919050565b611132611d52565b73ffffffffffffffffffffffffffffffffffffffff1661115061133d565b73ffffffffffffffffffffffffffffffffffffffff16146111a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119d90613cdb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b67011c37937e08000081565b61127b611d52565b73ffffffffffffffffffffffffffffffffffffffff1661129961133d565b73ffffffffffffffffffffffffffffffffffffffff16146112ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e690613cdb565b60405180910390fd5b6000600d5414611334576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132b90613bbb565b60405180910390fd5b43600c81905550565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060078054611376906140b2565b80601f01602080910402602001604051908101604052809291908181526020018280546113a2906140b2565b80156113ef5780601f106113c4576101008083540402835291602001916113ef565b820191906000526020600020905b8154815290600101906020018083116113d257829003601f168201915b5050505050905090565b611401611d52565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561146f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146690613afb565b60405180910390fd5b806005600061147c611d52565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611529611d52565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161156e91906139fe565b60405180910390a35050565b600f60009054906101000a900460ff166115c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c090613c1b565b60405180910390fd5b601481111561160d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160490613b9b565b60405180910390fd5b600e5461162a8261161c610bff565b6121ce90919063ffffffff16565b111561166b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166290613c7b565b60405180910390fd5b346116878267011c37937e08000061222c90919063ffffffff16565b11156116c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116bf90613b1b565b60405180910390fd5b60005b8181101561170f5760006116dd610bff565b9050600e546116ea610bff565b10156116fb576116fa33826122a7565b5b50808061170790614115565b9150506116cb565b506000600c541480156117375750600e54611728610bff565b148061173657506010544210155b5b156117445743600c819055505b50565b61174f611d52565b73ffffffffffffffffffffffffffffffffffffffff1661176d61133d565b73ffffffffffffffffffffffffffffffffffffffff16146117c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ba90613cdb565b60405180910390fd5b60006117cd610bff565b905060005b601e811015611803576117f03382846117eb9190613eab565b6122a7565b80806117fb90614115565b9150506117d2565b5050565b611818611812611d52565b83611e45565b611857576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184e90613d7b565b60405180910390fd5b611863848484846122c5565b50505050565b600e5481565b606061187a82611d5a565b6118b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b090613d1b565b60405180910390fd5b60006008600084815260200190815260200160002080546118d9906140b2565b80601f0160208091040260200160405190810160405280929190818152602001828054611905906140b2565b80156119525780601f1061192757610100808354040283529160200191611952565b820191906000526020600020905b81548152906001019060200180831161193557829003601f168201915b505050505090506000611963610fd9565b90506000815114156119795781925050506119dd565b6000825111156119ae578082604051602001611996929190613973565b604051602081830303815290604052925050506119dd565b806119b885612321565b6040516020016119c9929190613973565b604051602081830303815290604052925050505b919050565b600d5481565b600c5481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600d5414611ac7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611abe90613bbb565b60405180910390fd5b6000600c541415611b0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0490613d5b565b60405180910390fd5b600e54600c544060001c611b21919061415e565b600d8190555060ff611b3e600c54436124e090919063ffffffff16565b1115611b6957600e54600143611b549190613f8c565b4060001c611b62919061415e565b600d819055505b6000600d541415611b9157611b8a6001600d546121ce90919063ffffffff16565b600d819055505b565b600f60009054906101000a900460ff1681565b611bae611d52565b73ffffffffffffffffffffffffffffffffffffffff16611bcc61133d565b73ffffffffffffffffffffffffffffffffffffffff1614611c22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1990613cdb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611c92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8990613a7b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000611d7082600261253990919063ffffffff16565b9050919050565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611dea83610fa2565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611e3e82600001612553565b9050919050565b6000611e5082611d5a565b611e8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8690613b7b565b60405180910390fd5b6000611e9a83610fa2565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611f0957508373ffffffffffffffffffffffffffffffffffffffff16611ef1846109cc565b73ffffffffffffffffffffffffffffffffffffffff16145b80611f1a5750611f1981856119ee565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611f4382610fa2565b73ffffffffffffffffffffffffffffffffffffffff1614611f99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9090613cfb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612009576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200090613adb565b60405180910390fd5b612014838383612564565b61201f600082611d77565b61207081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061256990919063ffffffff16565b506120c281600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061258390919063ffffffff16565b506120d98183600261259d9092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600061214983600001836125d2565b60001c905092915050565b600080600080612167866000018661266c565b915091508160001c8160001c9350935050509250929050565b8060099080519060200190612196929190613039565b5050565b60006121ad846000018460001b8461271c565b60001c90509392505050565b60006121c7826000016127e3565b9050919050565b60008082846121dd9190613eab565b905083811015612222576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221990613abb565b60405180910390fd5b8091505092915050565b60008083141561223f57600090506122a1565b6000828461224d9190613f32565b905082848261225c9190613f01565b1461229c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229390613c9b565b60405180910390fd5b809150505b92915050565b6122c18282604051806020016040528060008152506127f4565b5050565b6122d0848484611f23565b6122dc8484848461284f565b61231b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231290613a5b565b60405180910390fd5b50505050565b60606000821415612369576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506124db565b600082905060005b6000821461239b57808061238490614115565b915050600a826123949190613f01565b9150612371565b60008167ffffffffffffffff8111156123dd577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561240f5781602001600182028036833780820191505090505b50905060006001836124219190613f8c565b90508593505b600084146124d357600a8461243c919061415e565b60306124489190613eab565b60f81b82828061245790614088565b935081518110612490577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a846124cc9190613f01565b9350612427565b819450505050505b919050565b600082821115612525576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251c90613b3b565b60405180910390fd5b81836125319190613f8c565b905092915050565b600061254b836000018360001b6129b3565b905092915050565b600081600001805490509050919050565b505050565b600061257b836000018360001b6129d6565b905092915050565b6000612595836000018360001b612b60565b905092915050565b60006125c9846000018460001b8473ffffffffffffffffffffffffffffffffffffffff1660001b612bd0565b90509392505050565b60008183600001805490501161261d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161261490613a3b565b60405180910390fd5b826000018281548110612659577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b600080828460000180549050116126b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126af90613c3b565b60405180910390fd5b60008460000184815481106126f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020190508060000154816001015492509250509250929050565b6000808460010160008581526020019081526020016000205490506000811415839061277e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127759190613a19565b60405180910390fd5b50846000016001826127909190613f8c565b815481106127c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060020201600101549150509392505050565b600081600001805490509050919050565b6127fe8383612ce2565b61280b600084848461284f565b61284a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161284190613a5b565b60405180910390fd5b505050565b60006128708473ffffffffffffffffffffffffffffffffffffffff16612e70565b61287d57600190506129ab565b600061294463150b7a0260e01b612892611d52565b8887876040516024016128a894939291906139b2565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518060600160405280603281526020016149bb603291398773ffffffffffffffffffffffffffffffffffffffff16612e839092919063ffffffff16565b905060008180602001905181019061295c91906133e5565b905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614925050505b949350505050565b600080836001016000848152602001908152602001600020541415905092915050565b60008083600101600084815260200190815260200160002054905060008114612b54576000600182612a089190613f8c565b9050600060018660000180549050612a209190613f8c565b90506000866000018281548110612a60577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110612aaa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200181905550600183612ac59190613eab565b8760010160008381526020019081526020016000208190555086600001805480612b18577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050612b5a565b60009150505b92915050565b6000612b6c8383612e9b565b612bc5578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612bca565b600090505b92915050565b6000808460010160008581526020019081526020016000205490506000811415612c7757846000016040518060400160405280868152602001858152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550508460000180549050856001016000868152602001908152602001600020819055506001915050612cdb565b8285600001600183612c899190613f8c565b81548110612cc0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016001018190555060009150505b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612d52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d4990613c5b565b60405180910390fd5b612d5b81611d5a565b15612d9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d9290613a9b565b60405180910390fd5b612da760008383612564565b612df881600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061258390919063ffffffff16565b50612e0f8183600261259d9092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080823b905060008111915050919050565b6060612e928484600085612ebe565b90509392505050565b600080836001016000848152602001908152602001600020541415905092915050565b606082471015612f03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612efa90613b5b565b60405180910390fd5b612f0c85612e70565b612f4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f4290613d9b565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612f74919061395c565b60006040518083038185875af1925050503d8060008114612fb1576040519150601f19603f3d011682016040523d82523d6000602084013e612fb6565b606091505b5091509150612fc6828286612fd2565b92505050949350505050565b60608315612fe257829050613032565b600083511115612ff55782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130299190613a19565b60405180910390fd5b9392505050565b828054613045906140b2565b90600052602060002090601f01602090048101928261306757600085556130ae565b82601f1061308057805160ff19168380011785556130ae565b828001600101855582156130ae579182015b828111156130ad578251825591602001919060010190613092565b5b5090506130bb91906130bf565b5090565b5b808211156130d85760008160009055506001016130c0565b5090565b60006130ef6130ea84613dfb565b613dd6565b90508281526020810184848401111561310757600080fd5b613112848285614046565b509392505050565b600061312d61312884613e2c565b613dd6565b90508281526020810184848401111561314557600080fd5b613150848285614046565b509392505050565b6000813590506131678161495e565b92915050565b60008135905061317c81614975565b92915050565b6000813590506131918161498c565b92915050565b6000815190506131a68161498c565b92915050565b600082601f8301126131bd57600080fd5b81356131cd8482602086016130dc565b91505092915050565b600082601f8301126131e757600080fd5b81356131f784826020860161311a565b91505092915050565b60008135905061320f816149a3565b92915050565b60006020828403121561322757600080fd5b600061323584828501613158565b91505092915050565b6000806040838503121561325157600080fd5b600061325f85828601613158565b925050602061327085828601613158565b9150509250929050565b60008060006060848603121561328f57600080fd5b600061329d86828701613158565b93505060206132ae86828701613158565b92505060406132bf86828701613200565b9150509250925092565b600080600080608085870312156132df57600080fd5b60006132ed87828801613158565b94505060206132fe87828801613158565b935050604061330f87828801613200565b925050606085013567ffffffffffffffff81111561332c57600080fd5b613338878288016131ac565b91505092959194509250565b6000806040838503121561335757600080fd5b600061336585828601613158565b92505060206133768582860161316d565b9150509250929050565b6000806040838503121561339357600080fd5b60006133a185828601613158565b92505060206133b285828601613200565b9150509250929050565b6000602082840312156133ce57600080fd5b60006133dc84828501613182565b91505092915050565b6000602082840312156133f757600080fd5b600061340584828501613197565b91505092915050565b60006020828403121561342057600080fd5b600082013567ffffffffffffffff81111561343a57600080fd5b613446848285016131d6565b91505092915050565b60006020828403121561346157600080fd5b600061346f84828501613200565b91505092915050565b61348181613fd2565b82525050565b61349081613fc0565b82525050565b61349f81613fe4565b82525050565b60006134b082613e5d565b6134ba8185613e73565b93506134ca818560208601614055565b6134d38161424b565b840191505092915050565b60006134e982613e5d565b6134f38185613e84565b9350613503818560208601614055565b80840191505092915050565b600061351a82613e68565b6135248185613e8f565b9350613534818560208601614055565b61353d8161424b565b840191505092915050565b600061355382613e68565b61355d8185613ea0565b935061356d818560208601614055565b80840191505092915050565b6000613586602283613e8f565b91506135918261425c565b604082019050919050565b60006135a9603283613e8f565b91506135b4826142ab565b604082019050919050565b60006135cc602683613e8f565b91506135d7826142fa565b604082019050919050565b60006135ef601c83613e8f565b91506135fa82614349565b602082019050919050565b6000613612601b83613e8f565b915061361d82614372565b602082019050919050565b6000613635602483613e8f565b91506136408261439b565b604082019050919050565b6000613658601983613e8f565b9150613663826143ea565b602082019050919050565b600061367b601f83613e8f565b915061368682614413565b602082019050919050565b600061369e601e83613e8f565b91506136a98261443c565b602082019050919050565b60006136c1602683613e8f565b91506136cc82614465565b604082019050919050565b60006136e4602c83613e8f565b91506136ef826144b4565b604082019050919050565b6000613707602183613e8f565b915061371282614503565b604082019050919050565b600061372a601d83613e8f565b915061373582614552565b602082019050919050565b600061374d603883613e8f565b91506137588261457b565b604082019050919050565b6000613770602a83613e8f565b915061377b826145ca565b604082019050919050565b6000613793601f83613e8f565b915061379e82614619565b602082019050919050565b60006137b6602283613e8f565b91506137c182614642565b604082019050919050565b60006137d9602083613e8f565b91506137e482614691565b602082019050919050565b60006137fc602883613e8f565b9150613807826146ba565b604082019050919050565b600061381f602183613e8f565b915061382a82614709565b604082019050919050565b6000613842602c83613e8f565b915061384d82614758565b604082019050919050565b6000613865602083613e8f565b9150613870826147a7565b602082019050919050565b6000613888602983613e8f565b9150613893826147d0565b604082019050919050565b60006138ab602f83613e8f565b91506138b68261481f565b604082019050919050565b60006138ce602183613e8f565b91506138d98261486e565b604082019050919050565b60006138f1602083613e8f565b91506138fc826148bd565b602082019050919050565b6000613914603183613e8f565b915061391f826148e6565b604082019050919050565b6000613937601d83613e8f565b915061394282614935565b602082019050919050565b6139568161403c565b82525050565b600061396882846134de565b915081905092915050565b600061397f8285613548565b915061398b8284613548565b91508190509392505050565b60006020820190506139ac6000830184613487565b92915050565b60006080820190506139c76000830187613478565b6139d46020830186613487565b6139e1604083018561394d565b81810360608301526139f381846134a5565b905095945050505050565b6000602082019050613a136000830184613496565b92915050565b60006020820190508181036000830152613a33818461350f565b905092915050565b60006020820190508181036000830152613a5481613579565b9050919050565b60006020820190508181036000830152613a748161359c565b9050919050565b60006020820190508181036000830152613a94816135bf565b9050919050565b60006020820190508181036000830152613ab4816135e2565b9050919050565b60006020820190508181036000830152613ad481613605565b9050919050565b60006020820190508181036000830152613af481613628565b9050919050565b60006020820190508181036000830152613b148161364b565b9050919050565b60006020820190508181036000830152613b348161366e565b9050919050565b60006020820190508181036000830152613b5481613691565b9050919050565b60006020820190508181036000830152613b74816136b4565b9050919050565b60006020820190508181036000830152613b94816136d7565b9050919050565b60006020820190508181036000830152613bb4816136fa565b9050919050565b60006020820190508181036000830152613bd48161371d565b9050919050565b60006020820190508181036000830152613bf481613740565b9050919050565b60006020820190508181036000830152613c1481613763565b9050919050565b60006020820190508181036000830152613c3481613786565b9050919050565b60006020820190508181036000830152613c54816137a9565b9050919050565b60006020820190508181036000830152613c74816137cc565b9050919050565b60006020820190508181036000830152613c94816137ef565b9050919050565b60006020820190508181036000830152613cb481613812565b9050919050565b60006020820190508181036000830152613cd481613835565b9050919050565b60006020820190508181036000830152613cf481613858565b9050919050565b60006020820190508181036000830152613d148161387b565b9050919050565b60006020820190508181036000830152613d348161389e565b9050919050565b60006020820190508181036000830152613d54816138c1565b9050919050565b60006020820190508181036000830152613d74816138e4565b9050919050565b60006020820190508181036000830152613d9481613907565b9050919050565b60006020820190508181036000830152613db48161392a565b9050919050565b6000602082019050613dd0600083018461394d565b92915050565b6000613de0613df1565b9050613dec82826140e4565b919050565b6000604051905090565b600067ffffffffffffffff821115613e1657613e1561421c565b5b613e1f8261424b565b9050602081019050919050565b600067ffffffffffffffff821115613e4757613e4661421c565b5b613e508261424b565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000613eb68261403c565b9150613ec18361403c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613ef657613ef561418f565b5b828201905092915050565b6000613f0c8261403c565b9150613f178361403c565b925082613f2757613f266141be565b5b828204905092915050565b6000613f3d8261403c565b9150613f488361403c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613f8157613f8061418f565b5b828202905092915050565b6000613f978261403c565b9150613fa28361403c565b925082821015613fb557613fb461418f565b5b828203905092915050565b6000613fcb8261401c565b9050919050565b6000613fdd8261401c565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015614073578082015181840152602081019050614058565b83811115614082576000848401525b50505050565b60006140938261403c565b915060008214156140a7576140a661418f565b5b600182039050919050565b600060028204905060018216806140ca57607f821691505b602082108114156140de576140dd6141ed565b5b50919050565b6140ed8261424b565b810181811067ffffffffffffffff8211171561410c5761410b61421c565b5b80604052505050565b60006141208261403c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156141535761415261418f565b5b600182019050919050565b60006141698261403c565b91506141748361403c565b925082614184576141836141be565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008201527f6473000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f45746865722076616c75652073656e74206973206e6f7420636f727265637400600082015250565b7f536166654d6174683a207375627472616374696f6e206f766572666c6f770000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f43616e206f6e6c79206d696e7420323020746f6b656e7320617420612074696d60008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b7f5374617274696e6720696e64657820697320616c726561647920736574000000600082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f53616c65206d7573742062652061637469766520746f206d696e742041706500600082015250565b7f456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e60008201527f6473000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f507572636861736520776f756c6420657863656564206d617820737570706c7960008201527f206f662041706573000000000000000000000000000000000000000000000000602082015250565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008201527f7700000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f5374617274696e6720696e64657820626c6f636b206d75737420626520736574600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b61496781613fc0565b811461497257600080fd5b50565b61497e81613fe4565b811461498957600080fd5b50565b61499581613ff0565b81146149a057600080fd5b50565b6149ac8161403c565b81146149b757600080fd5b5056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656ea26469706673582212200eef9aea0e971ea298c97c39ef6c956840f37293a1a03199c0665d3abdf50aed64736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061021a5760003560e01c80636c0360eb11610123578063b0f67427116100ab578063e36d64981161006f578063e36d64981461077a578063e985e9c5146107a5578063e9866550146107e2578063eb8d2444146107f9578063f2fde38b146108245761021a565b8063b0f67427146106a7578063b88d4fde146106be578063bb8a16bd146106e7578063c87b56dd14610712578063cb774d471461074f5761021a565b80637d17fcbe116100f25780637d17fcbe146105f55780638da5cb5b1461060c57806395d89b4114610637578063a22cb46514610662578063a723533e1461068b5761021a565b80636c0360eb1461054b57806370a0823114610576578063715018a6146105b35780637a3f451e146105ca5761021a565b80632f745c59116101a65780634f6ccce7116101755780634f6ccce71461045257806355f804b31461048f578063571dff3b146104b8578063607e20e3146104e35780636352211e1461050e5761021a565b80632f745c59146103be57806334918dfd146103fb5780633ccfd60b1461041257806342842e0e146104295761021a565b8063095ea7b3116101ed578063095ea7b3146102ed578063109695231461031657806318160ddd1461033f57806318e20a381461036a57806323b872dd146103955761021a565b8063018a2c371461021f57806301ffc9a71461024857806306fdde0314610285578063081812fc146102b0575b600080fd5b34801561022b57600080fd5b506102466004803603810190610241919061344f565b61084d565b005b34801561025457600080fd5b5061026f600480360381019061026a91906133bc565b6108d3565b60405161027c91906139fe565b60405180910390f35b34801561029157600080fd5b5061029a61093a565b6040516102a79190613a19565b60405180910390f35b3480156102bc57600080fd5b506102d760048036038101906102d2919061344f565b6109cc565b6040516102e49190613997565b60405180910390f35b3480156102f957600080fd5b50610314600480360381019061030f9190613380565b610a51565b005b34801561032257600080fd5b5061033d6004803603810190610338919061340e565b610b69565b005b34801561034b57600080fd5b50610354610bff565b6040516103619190613dbb565b60405180910390f35b34801561037657600080fd5b5061037f610c10565b60405161038c9190613dbb565b60405180910390f35b3480156103a157600080fd5b506103bc60048036038101906103b7919061327a565b610c16565b005b3480156103ca57600080fd5b506103e560048036038101906103e09190613380565b610c76565b6040516103f29190613dbb565b60405180910390f35b34801561040757600080fd5b50610410610cd1565b005b34801561041e57600080fd5b50610427610d79565b005b34801561043557600080fd5b50610450600480360381019061044b919061327a565b610e44565b005b34801561045e57600080fd5b506104796004803603810190610474919061344f565b610e64565b6040516104869190613dbb565b60405180910390f35b34801561049b57600080fd5b506104b660048036038101906104b1919061340e565b610e87565b005b3480156104c457600080fd5b506104cd610f0f565b6040516104da9190613dbb565b60405180910390f35b3480156104ef57600080fd5b506104f8610f14565b6040516105059190613a19565b60405180910390f35b34801561051a57600080fd5b506105356004803603810190610530919061344f565b610fa2565b6040516105429190613997565b60405180910390f35b34801561055757600080fd5b50610560610fd9565b60405161056d9190613a19565b60405180910390f35b34801561058257600080fd5b5061059d60048036038101906105989190613215565b61106b565b6040516105aa9190613dbb565b60405180910390f35b3480156105bf57600080fd5b506105c861112a565b005b3480156105d657600080fd5b506105df611267565b6040516105ec9190613dbb565b60405180910390f35b34801561060157600080fd5b5061060a611273565b005b34801561061857600080fd5b5061062161133d565b60405161062e9190613997565b60405180910390f35b34801561064357600080fd5b5061064c611367565b6040516106599190613a19565b60405180910390f35b34801561066e57600080fd5b5061068960048036038101906106849190613344565b6113f9565b005b6106a560048036038101906106a0919061344f565b61157a565b005b3480156106b357600080fd5b506106bc611747565b005b3480156106ca57600080fd5b506106e560048036038101906106e091906132c9565b611807565b005b3480156106f357600080fd5b506106fc611869565b6040516107099190613dbb565b60405180910390f35b34801561071e57600080fd5b506107396004803603810190610734919061344f565b61186f565b6040516107469190613a19565b60405180910390f35b34801561075b57600080fd5b506107646119e2565b6040516107719190613dbb565b60405180910390f35b34801561078657600080fd5b5061078f6119e8565b60405161079c9190613dbb565b60405180910390f35b3480156107b157600080fd5b506107cc60048036038101906107c7919061323e565b6119ee565b6040516107d991906139fe565b60405180910390f35b3480156107ee57600080fd5b506107f7611a82565b005b34801561080557600080fd5b5061080e611b93565b60405161081b91906139fe565b60405180910390f35b34801561083057600080fd5b5061084b60048036038101906108469190613215565b611ba6565b005b610855611d52565b73ffffffffffffffffffffffffffffffffffffffff1661087361133d565b73ffffffffffffffffffffffffffffffffffffffff16146108c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c090613cdb565b60405180910390fd5b8060108190555050565b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606060068054610949906140b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610975906140b2565b80156109c25780601f10610997576101008083540402835291602001916109c2565b820191906000526020600020905b8154815290600101906020018083116109a557829003601f168201915b5050505050905090565b60006109d782611d5a565b610a16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0d90613cbb565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610a5c82610fa2565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610acd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac490613d3b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610aec611d52565b73ffffffffffffffffffffffffffffffffffffffff161480610b1b5750610b1a81610b15611d52565b6119ee565b5b610b5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5190613bdb565b60405180910390fd5b610b648383611d77565b505050565b610b71611d52565b73ffffffffffffffffffffffffffffffffffffffff16610b8f61133d565b73ffffffffffffffffffffffffffffffffffffffff1614610be5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bdc90613cdb565b60405180910390fd5b80600b9080519060200190610bfb929190613039565b5050565b6000610c0b6002611e30565b905090565b60105481565b610c27610c21611d52565b82611e45565b610c66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5d90613d7b565b60405180910390fd5b610c71838383611f23565b505050565b6000610cc982600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061213a90919063ffffffff16565b905092915050565b610cd9611d52565b73ffffffffffffffffffffffffffffffffffffffff16610cf761133d565b73ffffffffffffffffffffffffffffffffffffffff1614610d4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4490613cdb565b60405180910390fd5b600f60009054906101000a900460ff1615600f60006101000a81548160ff021916908315150217905550565b610d81611d52565b73ffffffffffffffffffffffffffffffffffffffff16610d9f61133d565b73ffffffffffffffffffffffffffffffffffffffff1614610df5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dec90613cdb565b60405180910390fd5b60004790503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610e40573d6000803e3d6000fd5b5050565b610e5f83838360405180602001604052806000815250611807565b505050565b600080610e7b83600261215490919063ffffffff16565b50905080915050919050565b610e8f611d52565b73ffffffffffffffffffffffffffffffffffffffff16610ead61133d565b73ffffffffffffffffffffffffffffffffffffffff1614610f03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efa90613cdb565b60405180910390fd5b610f0c81612180565b50565b601481565b600b8054610f21906140b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4d906140b2565b8015610f9a5780601f10610f6f57610100808354040283529160200191610f9a565b820191906000526020600020905b815481529060010190602001808311610f7d57829003601f168201915b505050505081565b6000610fd2826040518060600160405280602981526020016149ed60299139600261219a9092919063ffffffff16565b9050919050565b606060098054610fe8906140b2565b80601f0160208091040260200160405190810160405280929190818152602001828054611014906140b2565b80156110615780601f1061103657610100808354040283529160200191611061565b820191906000526020600020905b81548152906001019060200180831161104457829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156110dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d390613bfb565b60405180910390fd5b611123600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206121b9565b9050919050565b611132611d52565b73ffffffffffffffffffffffffffffffffffffffff1661115061133d565b73ffffffffffffffffffffffffffffffffffffffff16146111a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119d90613cdb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b67011c37937e08000081565b61127b611d52565b73ffffffffffffffffffffffffffffffffffffffff1661129961133d565b73ffffffffffffffffffffffffffffffffffffffff16146112ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e690613cdb565b60405180910390fd5b6000600d5414611334576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132b90613bbb565b60405180910390fd5b43600c81905550565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060078054611376906140b2565b80601f01602080910402602001604051908101604052809291908181526020018280546113a2906140b2565b80156113ef5780601f106113c4576101008083540402835291602001916113ef565b820191906000526020600020905b8154815290600101906020018083116113d257829003601f168201915b5050505050905090565b611401611d52565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561146f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146690613afb565b60405180910390fd5b806005600061147c611d52565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611529611d52565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161156e91906139fe565b60405180910390a35050565b600f60009054906101000a900460ff166115c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c090613c1b565b60405180910390fd5b601481111561160d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160490613b9b565b60405180910390fd5b600e5461162a8261161c610bff565b6121ce90919063ffffffff16565b111561166b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166290613c7b565b60405180910390fd5b346116878267011c37937e08000061222c90919063ffffffff16565b11156116c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116bf90613b1b565b60405180910390fd5b60005b8181101561170f5760006116dd610bff565b9050600e546116ea610bff565b10156116fb576116fa33826122a7565b5b50808061170790614115565b9150506116cb565b506000600c541480156117375750600e54611728610bff565b148061173657506010544210155b5b156117445743600c819055505b50565b61174f611d52565b73ffffffffffffffffffffffffffffffffffffffff1661176d61133d565b73ffffffffffffffffffffffffffffffffffffffff16146117c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ba90613cdb565b60405180910390fd5b60006117cd610bff565b905060005b601e811015611803576117f03382846117eb9190613eab565b6122a7565b80806117fb90614115565b9150506117d2565b5050565b611818611812611d52565b83611e45565b611857576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184e90613d7b565b60405180910390fd5b611863848484846122c5565b50505050565b600e5481565b606061187a82611d5a565b6118b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b090613d1b565b60405180910390fd5b60006008600084815260200190815260200160002080546118d9906140b2565b80601f0160208091040260200160405190810160405280929190818152602001828054611905906140b2565b80156119525780601f1061192757610100808354040283529160200191611952565b820191906000526020600020905b81548152906001019060200180831161193557829003601f168201915b505050505090506000611963610fd9565b90506000815114156119795781925050506119dd565b6000825111156119ae578082604051602001611996929190613973565b604051602081830303815290604052925050506119dd565b806119b885612321565b6040516020016119c9929190613973565b604051602081830303815290604052925050505b919050565b600d5481565b600c5481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600d5414611ac7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611abe90613bbb565b60405180910390fd5b6000600c541415611b0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0490613d5b565b60405180910390fd5b600e54600c544060001c611b21919061415e565b600d8190555060ff611b3e600c54436124e090919063ffffffff16565b1115611b6957600e54600143611b549190613f8c565b4060001c611b62919061415e565b600d819055505b6000600d541415611b9157611b8a6001600d546121ce90919063ffffffff16565b600d819055505b565b600f60009054906101000a900460ff1681565b611bae611d52565b73ffffffffffffffffffffffffffffffffffffffff16611bcc61133d565b73ffffffffffffffffffffffffffffffffffffffff1614611c22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1990613cdb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611c92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8990613a7b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000611d7082600261253990919063ffffffff16565b9050919050565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611dea83610fa2565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611e3e82600001612553565b9050919050565b6000611e5082611d5a565b611e8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8690613b7b565b60405180910390fd5b6000611e9a83610fa2565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611f0957508373ffffffffffffffffffffffffffffffffffffffff16611ef1846109cc565b73ffffffffffffffffffffffffffffffffffffffff16145b80611f1a5750611f1981856119ee565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611f4382610fa2565b73ffffffffffffffffffffffffffffffffffffffff1614611f99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9090613cfb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612009576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200090613adb565b60405180910390fd5b612014838383612564565b61201f600082611d77565b61207081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061256990919063ffffffff16565b506120c281600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061258390919063ffffffff16565b506120d98183600261259d9092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600061214983600001836125d2565b60001c905092915050565b600080600080612167866000018661266c565b915091508160001c8160001c9350935050509250929050565b8060099080519060200190612196929190613039565b5050565b60006121ad846000018460001b8461271c565b60001c90509392505050565b60006121c7826000016127e3565b9050919050565b60008082846121dd9190613eab565b905083811015612222576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221990613abb565b60405180910390fd5b8091505092915050565b60008083141561223f57600090506122a1565b6000828461224d9190613f32565b905082848261225c9190613f01565b1461229c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229390613c9b565b60405180910390fd5b809150505b92915050565b6122c18282604051806020016040528060008152506127f4565b5050565b6122d0848484611f23565b6122dc8484848461284f565b61231b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231290613a5b565b60405180910390fd5b50505050565b60606000821415612369576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506124db565b600082905060005b6000821461239b57808061238490614115565b915050600a826123949190613f01565b9150612371565b60008167ffffffffffffffff8111156123dd577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561240f5781602001600182028036833780820191505090505b50905060006001836124219190613f8c565b90508593505b600084146124d357600a8461243c919061415e565b60306124489190613eab565b60f81b82828061245790614088565b935081518110612490577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a846124cc9190613f01565b9350612427565b819450505050505b919050565b600082821115612525576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251c90613b3b565b60405180910390fd5b81836125319190613f8c565b905092915050565b600061254b836000018360001b6129b3565b905092915050565b600081600001805490509050919050565b505050565b600061257b836000018360001b6129d6565b905092915050565b6000612595836000018360001b612b60565b905092915050565b60006125c9846000018460001b8473ffffffffffffffffffffffffffffffffffffffff1660001b612bd0565b90509392505050565b60008183600001805490501161261d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161261490613a3b565b60405180910390fd5b826000018281548110612659577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b600080828460000180549050116126b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126af90613c3b565b60405180910390fd5b60008460000184815481106126f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020190508060000154816001015492509250509250929050565b6000808460010160008581526020019081526020016000205490506000811415839061277e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127759190613a19565b60405180910390fd5b50846000016001826127909190613f8c565b815481106127c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060020201600101549150509392505050565b600081600001805490509050919050565b6127fe8383612ce2565b61280b600084848461284f565b61284a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161284190613a5b565b60405180910390fd5b505050565b60006128708473ffffffffffffffffffffffffffffffffffffffff16612e70565b61287d57600190506129ab565b600061294463150b7a0260e01b612892611d52565b8887876040516024016128a894939291906139b2565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518060600160405280603281526020016149bb603291398773ffffffffffffffffffffffffffffffffffffffff16612e839092919063ffffffff16565b905060008180602001905181019061295c91906133e5565b905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614925050505b949350505050565b600080836001016000848152602001908152602001600020541415905092915050565b60008083600101600084815260200190815260200160002054905060008114612b54576000600182612a089190613f8c565b9050600060018660000180549050612a209190613f8c565b90506000866000018281548110612a60577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110612aaa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200181905550600183612ac59190613eab565b8760010160008381526020019081526020016000208190555086600001805480612b18577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050612b5a565b60009150505b92915050565b6000612b6c8383612e9b565b612bc5578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612bca565b600090505b92915050565b6000808460010160008581526020019081526020016000205490506000811415612c7757846000016040518060400160405280868152602001858152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550508460000180549050856001016000868152602001908152602001600020819055506001915050612cdb565b8285600001600183612c899190613f8c565b81548110612cc0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016001018190555060009150505b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612d52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d4990613c5b565b60405180910390fd5b612d5b81611d5a565b15612d9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d9290613a9b565b60405180910390fd5b612da760008383612564565b612df881600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061258390919063ffffffff16565b50612e0f8183600261259d9092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080823b905060008111915050919050565b6060612e928484600085612ebe565b90509392505050565b600080836001016000848152602001908152602001600020541415905092915050565b606082471015612f03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612efa90613b5b565b60405180910390fd5b612f0c85612e70565b612f4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f4290613d9b565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612f74919061395c565b60006040518083038185875af1925050503d8060008114612fb1576040519150601f19603f3d011682016040523d82523d6000602084013e612fb6565b606091505b5091509150612fc6828286612fd2565b92505050949350505050565b60608315612fe257829050613032565b600083511115612ff55782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130299190613a19565b60405180910390fd5b9392505050565b828054613045906140b2565b90600052602060002090601f01602090048101928261306757600085556130ae565b82601f1061308057805160ff19168380011785556130ae565b828001600101855582156130ae579182015b828111156130ad578251825591602001919060010190613092565b5b5090506130bb91906130bf565b5090565b5b808211156130d85760008160009055506001016130c0565b5090565b60006130ef6130ea84613dfb565b613dd6565b90508281526020810184848401111561310757600080fd5b613112848285614046565b509392505050565b600061312d61312884613e2c565b613dd6565b90508281526020810184848401111561314557600080fd5b613150848285614046565b509392505050565b6000813590506131678161495e565b92915050565b60008135905061317c81614975565b92915050565b6000813590506131918161498c565b92915050565b6000815190506131a68161498c565b92915050565b600082601f8301126131bd57600080fd5b81356131cd8482602086016130dc565b91505092915050565b600082601f8301126131e757600080fd5b81356131f784826020860161311a565b91505092915050565b60008135905061320f816149a3565b92915050565b60006020828403121561322757600080fd5b600061323584828501613158565b91505092915050565b6000806040838503121561325157600080fd5b600061325f85828601613158565b925050602061327085828601613158565b9150509250929050565b60008060006060848603121561328f57600080fd5b600061329d86828701613158565b93505060206132ae86828701613158565b92505060406132bf86828701613200565b9150509250925092565b600080600080608085870312156132df57600080fd5b60006132ed87828801613158565b94505060206132fe87828801613158565b935050604061330f87828801613200565b925050606085013567ffffffffffffffff81111561332c57600080fd5b613338878288016131ac565b91505092959194509250565b6000806040838503121561335757600080fd5b600061336585828601613158565b92505060206133768582860161316d565b9150509250929050565b6000806040838503121561339357600080fd5b60006133a185828601613158565b92505060206133b285828601613200565b9150509250929050565b6000602082840312156133ce57600080fd5b60006133dc84828501613182565b91505092915050565b6000602082840312156133f757600080fd5b600061340584828501613197565b91505092915050565b60006020828403121561342057600080fd5b600082013567ffffffffffffffff81111561343a57600080fd5b613446848285016131d6565b91505092915050565b60006020828403121561346157600080fd5b600061346f84828501613200565b91505092915050565b61348181613fd2565b82525050565b61349081613fc0565b82525050565b61349f81613fe4565b82525050565b60006134b082613e5d565b6134ba8185613e73565b93506134ca818560208601614055565b6134d38161424b565b840191505092915050565b60006134e982613e5d565b6134f38185613e84565b9350613503818560208601614055565b80840191505092915050565b600061351a82613e68565b6135248185613e8f565b9350613534818560208601614055565b61353d8161424b565b840191505092915050565b600061355382613e68565b61355d8185613ea0565b935061356d818560208601614055565b80840191505092915050565b6000613586602283613e8f565b91506135918261425c565b604082019050919050565b60006135a9603283613e8f565b91506135b4826142ab565b604082019050919050565b60006135cc602683613e8f565b91506135d7826142fa565b604082019050919050565b60006135ef601c83613e8f565b91506135fa82614349565b602082019050919050565b6000613612601b83613e8f565b915061361d82614372565b602082019050919050565b6000613635602483613e8f565b91506136408261439b565b604082019050919050565b6000613658601983613e8f565b9150613663826143ea565b602082019050919050565b600061367b601f83613e8f565b915061368682614413565b602082019050919050565b600061369e601e83613e8f565b91506136a98261443c565b602082019050919050565b60006136c1602683613e8f565b91506136cc82614465565b604082019050919050565b60006136e4602c83613e8f565b91506136ef826144b4565b604082019050919050565b6000613707602183613e8f565b915061371282614503565b604082019050919050565b600061372a601d83613e8f565b915061373582614552565b602082019050919050565b600061374d603883613e8f565b91506137588261457b565b604082019050919050565b6000613770602a83613e8f565b915061377b826145ca565b604082019050919050565b6000613793601f83613e8f565b915061379e82614619565b602082019050919050565b60006137b6602283613e8f565b91506137c182614642565b604082019050919050565b60006137d9602083613e8f565b91506137e482614691565b602082019050919050565b60006137fc602883613e8f565b9150613807826146ba565b604082019050919050565b600061381f602183613e8f565b915061382a82614709565b604082019050919050565b6000613842602c83613e8f565b915061384d82614758565b604082019050919050565b6000613865602083613e8f565b9150613870826147a7565b602082019050919050565b6000613888602983613e8f565b9150613893826147d0565b604082019050919050565b60006138ab602f83613e8f565b91506138b68261481f565b604082019050919050565b60006138ce602183613e8f565b91506138d98261486e565b604082019050919050565b60006138f1602083613e8f565b91506138fc826148bd565b602082019050919050565b6000613914603183613e8f565b915061391f826148e6565b604082019050919050565b6000613937601d83613e8f565b915061394282614935565b602082019050919050565b6139568161403c565b82525050565b600061396882846134de565b915081905092915050565b600061397f8285613548565b915061398b8284613548565b91508190509392505050565b60006020820190506139ac6000830184613487565b92915050565b60006080820190506139c76000830187613478565b6139d46020830186613487565b6139e1604083018561394d565b81810360608301526139f381846134a5565b905095945050505050565b6000602082019050613a136000830184613496565b92915050565b60006020820190508181036000830152613a33818461350f565b905092915050565b60006020820190508181036000830152613a5481613579565b9050919050565b60006020820190508181036000830152613a748161359c565b9050919050565b60006020820190508181036000830152613a94816135bf565b9050919050565b60006020820190508181036000830152613ab4816135e2565b9050919050565b60006020820190508181036000830152613ad481613605565b9050919050565b60006020820190508181036000830152613af481613628565b9050919050565b60006020820190508181036000830152613b148161364b565b9050919050565b60006020820190508181036000830152613b348161366e565b9050919050565b60006020820190508181036000830152613b5481613691565b9050919050565b60006020820190508181036000830152613b74816136b4565b9050919050565b60006020820190508181036000830152613b94816136d7565b9050919050565b60006020820190508181036000830152613bb4816136fa565b9050919050565b60006020820190508181036000830152613bd48161371d565b9050919050565b60006020820190508181036000830152613bf481613740565b9050919050565b60006020820190508181036000830152613c1481613763565b9050919050565b60006020820190508181036000830152613c3481613786565b9050919050565b60006020820190508181036000830152613c54816137a9565b9050919050565b60006020820190508181036000830152613c74816137cc565b9050919050565b60006020820190508181036000830152613c94816137ef565b9050919050565b60006020820190508181036000830152613cb481613812565b9050919050565b60006020820190508181036000830152613cd481613835565b9050919050565b60006020820190508181036000830152613cf481613858565b9050919050565b60006020820190508181036000830152613d148161387b565b9050919050565b60006020820190508181036000830152613d348161389e565b9050919050565b60006020820190508181036000830152613d54816138c1565b9050919050565b60006020820190508181036000830152613d74816138e4565b9050919050565b60006020820190508181036000830152613d9481613907565b9050919050565b60006020820190508181036000830152613db48161392a565b9050919050565b6000602082019050613dd0600083018461394d565b92915050565b6000613de0613df1565b9050613dec82826140e4565b919050565b6000604051905090565b600067ffffffffffffffff821115613e1657613e1561421c565b5b613e1f8261424b565b9050602081019050919050565b600067ffffffffffffffff821115613e4757613e4661421c565b5b613e508261424b565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000613eb68261403c565b9150613ec18361403c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613ef657613ef561418f565b5b828201905092915050565b6000613f0c8261403c565b9150613f178361403c565b925082613f2757613f266141be565b5b828204905092915050565b6000613f3d8261403c565b9150613f488361403c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613f8157613f8061418f565b5b828202905092915050565b6000613f978261403c565b9150613fa28361403c565b925082821015613fb557613fb461418f565b5b828203905092915050565b6000613fcb8261401c565b9050919050565b6000613fdd8261401c565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015614073578082015181840152602081019050614058565b83811115614082576000848401525b50505050565b60006140938261403c565b915060008214156140a7576140a661418f565b5b600182039050919050565b600060028204905060018216806140ca57607f821691505b602082108114156140de576140dd6141ed565b5b50919050565b6140ed8261424b565b810181811067ffffffffffffffff8211171561410c5761410b61421c565b5b80604052505050565b60006141208261403c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156141535761415261418f565b5b600182019050919050565b60006141698261403c565b91506141748361403c565b925082614184576141836141be565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008201527f6473000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f45746865722076616c75652073656e74206973206e6f7420636f727265637400600082015250565b7f536166654d6174683a207375627472616374696f6e206f766572666c6f770000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f43616e206f6e6c79206d696e7420323020746f6b656e7320617420612074696d60008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b7f5374617274696e6720696e64657820697320616c726561647920736574000000600082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f53616c65206d7573742062652061637469766520746f206d696e742041706500600082015250565b7f456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e60008201527f6473000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f507572636861736520776f756c6420657863656564206d617820737570706c7960008201527f206f662041706573000000000000000000000000000000000000000000000000602082015250565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008201527f7700000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f5374617274696e6720696e64657820626c6f636b206d75737420626520736574600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b61496781613fc0565b811461497257600080fd5b50565b61497e81613fe4565b811461498957600080fd5b50565b61499581613ff0565b81146149a057600080fd5b50565b6149ac8161403c565b81146149b757600080fd5b5056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656ea26469706673582212200eef9aea0e971ea298c97c39ef6c956840f37293a1a03199c0665d3abdf50aed64736f6c63430008040033",
  "devdoc": {
    "details": "Extends ERC721 Non-Fungible Token Standard basic implementation",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "baseURI()": {
        "details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "BoredApeYachtClub contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "emergencySetStartingIndexBlock()": {
        "notice": "Set the starting index block for the collection, essentially unblocking setting starting index"
      },
      "mintApe(uint256)": {
        "notice": "Mints Bored Apes"
      },
      "reserveApes()": {
        "notice": "Set some Bored Apes aside"
      },
      "setRevealTimestamp(uint256)": {
        "notice": "DM Gargamel in Discord that you're standing right behind him."
      },
      "setStartingIndex()": {
        "notice": "Set the starting index for the collection"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2845,
        "contract": "contracts/BoredApeYachtClub.sol:BoredApeYachtClub",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 4753,
        "contract": "contracts/BoredApeYachtClub.sol:BoredApeYachtClub",
        "label": "_holderTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(UintSet)3951_storage)"
      },
      {
        "astId": 4756,
        "contract": "contracts/BoredApeYachtClub.sol:BoredApeYachtClub",
        "label": "_tokenOwners",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(UintToAddressMap)4396_storage"
      },
      {
        "astId": 4760,
        "contract": "contracts/BoredApeYachtClub.sol:BoredApeYachtClub",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4766,
        "contract": "contracts/BoredApeYachtClub.sol:BoredApeYachtClub",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4768,
        "contract": "contracts/BoredApeYachtClub.sol:BoredApeYachtClub",
        "label": "_name",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 4770,
        "contract": "contracts/BoredApeYachtClub.sol:BoredApeYachtClub",
        "label": "_symbol",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 4774,
        "contract": "contracts/BoredApeYachtClub.sol:BoredApeYachtClub",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 4776,
        "contract": "contracts/BoredApeYachtClub.sol:BoredApeYachtClub",
        "label": "_baseURI",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 5658,
        "contract": "contracts/BoredApeYachtClub.sol:BoredApeYachtClub",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 5772,
        "contract": "contracts/BoredApeYachtClub.sol:BoredApeYachtClub",
        "label": "BAYC_PROVENANCE",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 5774,
        "contract": "contracts/BoredApeYachtClub.sol:BoredApeYachtClub",
        "label": "startingIndexBlock",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5776,
        "contract": "contracts/BoredApeYachtClub.sol:BoredApeYachtClub",
        "label": "startingIndex",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 5784,
        "contract": "contracts/BoredApeYachtClub.sol:BoredApeYachtClub",
        "label": "MAX_APES",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 5787,
        "contract": "contracts/BoredApeYachtClub.sol:BoredApeYachtClub",
        "label": "saleIsActive",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 5789,
        "contract": "contracts/BoredApeYachtClub.sol:BoredApeYachtClub",
        "label": "REVEAL_TIMESTAMP",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(MapEntry)4058_storage)dyn_storage": {
        "base": "t_struct(MapEntry)4058_storage",
        "encoding": "dynamic_array",
        "label": "struct EnumerableMap.MapEntry[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(UintSet)3951_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)3951_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Map)4067_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Map",
        "members": [
          {
            "astId": 4062,
            "contract": "contracts/BoredApeYachtClub.sol:BoredApeYachtClub",
            "label": "_entries",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(MapEntry)4058_storage)dyn_storage"
          },
          {
            "astId": 4066,
            "contract": "contracts/BoredApeYachtClub.sol:BoredApeYachtClub",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MapEntry)4058_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.MapEntry",
        "members": [
          {
            "astId": 4055,
            "contract": "contracts/BoredApeYachtClub.sol:BoredApeYachtClub",
            "label": "_key",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 4057,
            "contract": "contracts/BoredApeYachtClub.sol:BoredApeYachtClub",
            "label": "_value",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3547_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3542,
            "contract": "contracts/BoredApeYachtClub.sol:BoredApeYachtClub",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3546,
            "contract": "contracts/BoredApeYachtClub.sol:BoredApeYachtClub",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)3951_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 3950,
            "contract": "contracts/BoredApeYachtClub.sol:BoredApeYachtClub",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3547_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintToAddressMap)4396_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.UintToAddressMap",
        "members": [
          {
            "astId": 4395,
            "contract": "contracts/BoredApeYachtClub.sol:BoredApeYachtClub",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Map)4067_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}